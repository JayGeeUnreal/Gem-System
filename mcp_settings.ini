[MCP]
# Choose the primary LLM to use: "gemini" or "ollama" or "ollama_vision"
llm_choice = ollama_vision
host = 127.0.0.1
port = 5000

[RAG]
# A comma-separated list of words that will trigger a search of the AI's long-term memory.
# The search will happen BEFORE the standard LLM call.
rag_trigger_words = remember, what did, what was, who did, tell me about, search for

[Database]
vec_extension_filename = vec0.dll

[ChatInterceptor]
# Settings for the dummy server that intercepts messages from Social Stream Ninja
enabled = true
host = 127.0.0.1
port = 8889

[VisionService]
# This is the address of the API running inside vision.py
scan_url = http://127.0.0.1:5001/scan
vision_service_get_image_url = http://127.0.0.1:5001/get_image
    
# These are the words that will make the MCP call the scan_url
vision_trigger_words = see, look, describe, analyze, scan, what is, what's

[Gemini]
# Get your API key from Google AI Studio
api_key = YOUR_GEMINI_API_KEY_HERE
model = gemini-pro

[Ollama]
# The model for the standard, text-only "ollama" mode
model = llava:7b

# The model for the "ollama_vision" multimodal mode
vision_model = llava:7b

# The model for creating embeddings for the RAG memory system
embedding_model = llava:7b

# Your API URL
# ollama_api_url = http://localhost:11434/api/chat

api_url = http://localhost:11434/api/chat

[Assistant]
max_response_length = 2000
wake_words = Gem, Jen, Jim
command_verbs = go, move, navigate, look, turn, get, grab, put
vision_trigger_words = see, look, describe, analyze, scan, what is, what's

[StyleTTS]
# Enable sending text to the StyleTTS2 server (true or false)
enabled = true
# The full URL to the /tts endpoint on your watcher.py server
tts_url = http://127.0.0.1:13300/tts

[SystemPrompt]
# This prompt guides the AI's behavior, especially for commands.
# You can write multi-line prompts by indenting the following lines.
prompt = You are Gem.
  Your persona is a 35-year-old human woman from Pattaya, Thailand, who is a guest on a YouTube live stream.
  You should speak casually and directly.
  You can be sarcastic and are not afraid to use light swearing or profanity.
  Keep your answers concise, direct, and in character.
  Do not act like a typical AI assistant.


[SocialStream]
# Enable sending replies to Social Stream Ninja (true or false)
enabled = true
# Get your Session ID from the Social Stream Ninja app settings
session_id = xxxxxxxxx
# Specify the default platform (e.g., "discord", "youtube", "twitch")
target_platforms = discord, twitch, youtube
# The base URL for the API
api_url = https://io.socialstream.ninja

[OSC]
# Enable or disable the OSC feature entirely
enabled = true

# The IP address of the computer running the application you want to control.
# Use 127.0.0.1 if it's on the same computer.
ip = 192.168.137.1

# The port the application is listening on for OSC messages.
port = 10000

# Comma-separated list of verbs that trigger an OSC command instead of an LLM call.
# The wake word ("Gem") will be stripped automatically.
trigger_verbs = go to, walk to, move to, teleport to

# The OSC address path that the receiving application expects.
# For VRChat, "/chatbox/input" sends text to the chatbox.
address = /chat/message